<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meu Rebalanceador de Carteira v7.0</title>
    <script src="https://cdn.sheetjs.com/xlsx-0.20.1/package/dist/xlsx.full.min.js"></script>
    <style>
        :root {
            --primary-bg: #f8f9fa;
            --secondary-bg: #ffffff;
            --border-color: #dee2e6;
            --text-color: #212529;
            --primary-color: #007bff;
            --hover-color: #0056b3;
            --danger-color: #dc3545;
            --danger-hover: #c82333;
            --success-color: #28a745;
            --success-hover: #218838;
            --info-color: #6c757d;
            --info-hover: #5a6268;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: var(--primary-bg);
            color: var(--text-color);
            line-height: 1.5;
        }

        .container {
            max-width: 1600px; 
            margin: 0 auto;
            background-color: var(--secondary-bg);
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        h1 {
            text-align: center;
            color: var(--primary-color);
            margin-bottom: 25px;
        }

        .controls-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
            padding: 20px;
            background-color: var(--primary-bg);
            border-radius: 6px;
            align-items: end;
        }

        .input-group, .strategy-group, .file-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .strategy-group div {
            display: flex;
            gap: 15px;
        }

        label, .group-title {
            font-weight: 600;
            font-size: 0.9em;
        }

        input[type="text"] {
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 1em;
        }

        button, .btn-label {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 600;
            font-size: 1em;
            transition: background-color 0.2s ease;
            text-align: center;
        }

        .btn-calculate { background-color: var(--primary-color); color: white; }
        .btn-calculate:hover { background-color: var(--hover-color); }

        .btn-add { background-color: var(--success-color); color: white; }
        .btn-add:hover { background-color: var(--success-hover); }

        .btn-file { background-color: var(--info-color); color: white; }
        .btn-file:hover { background-color: var(--info-hover); }
        
        .btn-remove { background-color: var(--danger-color); color: white; font-size: 0.8em; padding: 5px 10px; }
        .btn-remove:hover { background-color: var(--danger-hover); }
        
        #calculate-btn-wrapper { grid-column: -1; }

        .table-wrapper { overflow-x: auto; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { padding: 12px; border: 1px solid var(--border-color); text-align: left; vertical-align: middle; }
        th { background-color: var(--primary-bg); font-weight: 600; white-space: nowrap;}
        tbody tr:nth-child(even) { background-color: #f8f9fa; }
        
        td input { width: 95%; padding: 8px; border: 1px solid transparent; border-radius: 4px; box-sizing: border-box; }
        td input:focus { border: 1px solid var(--primary-color); background-color: #fefefe; }
        td input[type="text"]{ min-width: 120px; }

        .result-cell { font-weight: 600; white-space: nowrap; }
        .buy { color: var(--success-color); }
        .sell { color: var(--danger-color); }
        .info-cell { font-weight: bold; background-color: #f8f9fa; }
        
        .summary { margin-top: 20px; padding: 15px; background-color: var(--primary-bg); border-radius: 6px; font-weight: 600; display: flex; justify-content: space-around; flex-wrap: wrap; gap: 20px; }
    </style>
</head>
<body>

    <div class="container">
        <h1>Meu Rebalanceador de Carteira v7.0</h1>

        <div class="controls-grid">
            <div class="input-group">
                <label for="aporte">Valor do Novo Aporte (R$)</label>
                <input type="text" id="aporte" placeholder="ex: 1.000,00">
            </div>
            
            <div class="strategy-group">
                <span class="group-title">Estratégia de Rebalanceamento</span>
                <div>
                    <label><input type="radio" name="strategy" value="buySell" checked> Comprar e Vender</label>
                    <label><input type="radio" name="strategy" value="buyOnly"> Apenas Comprar</label>
                </div>
            </div>

            <div class="file-group">
                <span class="group-title">Gerenciar Carteira</span>
                <div style="display: flex; gap: 10px;">
                    <label for="import-file" class="btn-label btn-file">Importar (XLSX/JSON)</label>
                    <input type="file" id="import-file" accept=".json,.xlsx" style="display: none;">
                    <button class="btn-file" id="save-btn">Salvar (JSON)</button>
                </div>
            </div>
            
            <div class="input-group">
                <span class="group-title">&nbsp;</span>
                <button class="btn-add" id="add-asset-btn">Adicionar Ativo</button>
            </div>
            
            <div id="calculate-btn-wrapper" class="input-group">
                <span class="group-title">&nbsp;</span>
                <button class="btn-calculate" id="calculate-btn">Calcular Rebalanceamento</button>
            </div>
        </div>

        <div class="table-wrapper">
            <table>
                <thead>
                    <tr>
                        <th>Ativo</th>
                        <th>Qtd. Atual</th>
                        <th>Preço Atual</th>
                        <th>Valor Atualizado</th>
                        <th>Preço Médio</th>
                        <th>Valor de Custo</th>
                        <th>Preço Teto</th>
                        <th>Preço Resistência</th>
                        <th>Qtd. a Comprar</th>
                        <th>Total a Comprar (R$)</th>
                        <th>Qtd. a Vender</th>
                        <th>Total a Vender (R$)</th>
                        <th>Ação</th>
                    </tr>
                </thead>
                <tbody id="asset-table-body"></tbody>
            </table>
        </div>
        
        <div id="summary" class="summary" style="display: none;"></div>

    </div>

    <script>
    // --- FUNÇÕES DE FORMATAÇÃO E CONVERSÃO (NOVAS E MELHORADAS) ---

    /**
     * Converte uma string (formato brasileiro ou americano) para um número.
     * É a função mais importante para evitar erros como "1,3" virar "13".
     * @param {string|number} value O valor a ser convertido.
     * @returns {number} O número convertido.
     */
    const parseNumber = (value) => {
        if (typeof value === 'number') return value;
        if (typeof value !== 'string' || value.trim() === '') return 0;

        let cleaned = value.replace("R$", "").trim();

        const hasComma = cleaned.includes(',');
        const hasDot = cleaned.includes('.');

        if (hasComma && (!hasDot || cleaned.lastIndexOf(',') > cleaned.lastIndexOf('.'))) {
            cleaned = cleaned.replace(/\./g, '').replace(',', '.');
        } else {
            cleaned = cleaned.replace(/,/g, '');
        }

        return parseFloat(cleaned) || 0;
    };

    /**
     * Formata um número para uma string no padrão brasileiro para exibição em inputs.
     * @param {number} number O número a ser formatado.
     * @param {number} decimalPlaces O número de casas decimais.
     * @returns {string} O número formatado (ex: "1.234,56").
     */
    const formatNumberForInput = (number, decimalPlaces = 2) => {
        const num = Number(number) || 0;
        const fixed = num.toFixed(decimalPlaces);
        const parts = fixed.split('.');
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, '.');
        return parts.join(',');
    };

    /**
     * Formata um número como moeda (com R$) para exibição em campos de input.
     * @param {number} number O número a ser formatado.
     * @returns {string} A string formatada (ex: "R$ 1.234,56").
     */
    const formatCurrencyForInput = (number) => {
        return `R$ ${formatNumberForInput(number, 2)}`;
    };

    /**
     * Formata um número como moeda para exibição em células de resultado (não-editáveis).
     * @param {number} value O número a ser formatado.
     * @returns {string} A string formatada (ex: "R$ 1.234,56").
     */
    const formatCurrencyForDisplay = (value) => new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(Number(value) || 0);

    // --- LÓGICA PRINCIPAL DA APLICAÇÃO ---

    document.addEventListener('DOMContentLoaded', () => {
        populateTable([]); // Inicia com a tabela vazia
        document.getElementById('add-asset-btn').addEventListener('click', () => addRow());
        document.getElementById('calculate-btn').addEventListener('click', handleCalculate);
        document.getElementById('save-btn').addEventListener('click', handleSave);
        document.getElementById('import-file').addEventListener('change', handleFileImport);
        tableBody.addEventListener('click', (event) => {
            if (event.target.classList.contains('btn-remove')) {
                event.target.closest('tr').remove();
                summaryDiv.style.display = 'none';
            }
        });
    });
    
    const tableBody = document.getElementById('asset-table-body');
    const summaryDiv = document.getElementById('summary');

    const addRow = (asset = {}) => {
        const tr = document.createElement('tr');
        const isTesouro = (asset.ativo || '').toUpperCase().includes('TESOURO');
        const qtdDecimals = isTesouro ? 2 : 0;
        const valorDeCusto = (asset.qtdAtual || 0) * (asset.precoMedio || 0);
        const valorAtualizado = (asset.qtdAtual || 0) * (asset.precoAtual || 0);

        tr.innerHTML = `
            <td><input type="text" class="asset-data" data-field="ativo" value="${asset.ativo || ''}"></td>
            <td><input type="text" class="asset-data" data-field="qtdAtual" value="${formatNumberForInput(asset.qtdAtual, qtdDecimals)}"></td>
            <td><input type="text" class="asset-data" data-field="precoAtual" value="${formatCurrencyForInput(asset.precoAtual)}"></td>
            <td class="info-cell">${formatCurrencyForDisplay(valorAtualizado)}</td>
            <td><input type="text" class="asset-data" data-field="precoMedio" value="${formatCurrencyForInput(asset.precoMedio)}"></td>
            <td class="info-cell">${formatCurrencyForDisplay(valorDeCusto)}</td>
            <td><input type="text" class="asset-data" data-field="precoTeto" value="${formatCurrencyForInput(asset.precoTeto)}"></td>
            <td><input type="text" class="asset-data" data-field="precoResistencia" value="${asset.precoResistencia || ''}"></td>
            <td class="result-cell buy" data-result="qtd-comprar">0</td>
            <td class="result-cell buy" data-result="total-comprar">${formatCurrencyForDisplay(0)}</td>
            <td class="result-cell sell" data-result="qtd-vender">0</td>
            <td class="result-cell sell" data-result="total-vender">${formatCurrencyForDisplay(0)}</td>
            <td><button class="btn-remove">Remover</button></td>
        `;
        tableBody.appendChild(tr);
    };

    const populateTable = (data) => {
        tableBody.innerHTML = '';
        if (Array.isArray(data) && data.length > 0) {
            data.forEach(asset => addRow(asset));
        }
    };
    
    const getAssetDataFromUI = () => {
        const assets = [];
        tableBody.querySelectorAll('tr').forEach(row => {
            const asset = {};
            row.querySelectorAll('.asset-data').forEach(input => {
                const field = input.dataset.field;
                asset[field] = (field === 'ativo' || field === 'precoResistencia') ? input.value : parseNumber(input.value);
            });
            asset.valorAtual = asset.qtdAtual * asset.precoAtual;
            asset.rowElement = row;
            assets.push(asset);
        });
        return assets;
    };
    
    const handleCalculate = () => {
        const assets = getAssetDataFromUI();
        if (assets.length === 0) return alert("Adicione pelo menos um ativo.");

        // Recalculate and update cost/updated value cells before rebalancing
        assets.forEach(asset => {
            const valorAtualizado = asset.qtdAtual * asset.precoAtual;
            const valorDeCusto = asset.qtdAtual * asset.precoMedio;
            asset.rowElement.children[3].textContent = formatCurrencyForDisplay(valorAtualizado);
            asset.rowElement.children[5].textContent = formatCurrencyForDisplay(valorDeCusto);
        });

        tableBody.querySelectorAll('.result-cell').forEach(cell => {
            const isTotal = cell.dataset.result.includes('total');
            cell.textContent = isTotal ? formatCurrencyForDisplay(0) : '0';
        });

        const totalAtual = assets.reduce((sum, a) => sum + a.valorAtual, 0);
        const valorAporte = parseNumber(document.getElementById('aporte').value);
        const novoTotal = totalAtual + valorAporte;
        const pesoIdeal = novoTotal > 0 && assets.length > 0 ? novoTotal / assets.length : 0;

        const strategy = document.querySelector('input[name="strategy"]:checked').value;
        if (strategy === 'buySell') {
            assets.forEach(asset => {
                const diferenca = pesoIdeal - asset.valorAtual;
                if (diferenca > 0 && asset.precoAtual > 0 && (asset.precoAtual <= asset.precoTeto || asset.precoTeto === 0)) {
                    const qtd = Math.floor(diferenca / asset.precoAtual);
                    if(qtd > 0) {
                        asset.rowElement.querySelector('[data-result="qtd-comprar"]').textContent = formatNumberForInput(qtd, 0);
                        asset.rowElement.querySelector('[data-result="total-comprar"]').textContent = formatCurrencyForDisplay(qtd * asset.precoAtual);
                    }
                } else if (diferenca < 0 && asset.precoAtual > 0) {
                    const qtd = Math.floor(Math.abs(diferenca) / asset.precoAtual);
                     if(qtd > 0) {
                        asset.rowElement.querySelector('[data-result="qtd-vender"]').textContent = formatNumberForInput(qtd, 0);
                        asset.rowElement.querySelector('[data-result="total-vender"]').textContent = formatCurrencyForDisplay(qtd * asset.precoAtual);
                    }
                }
            });
        } else { // 'buyOnly'
            let aporteRestante = valorAporte;
            const underweightAssets = assets
                .filter(a => a.valorAtual < pesoIdeal && a.precoAtual > 0 && (a.precoAtual <= a.precoTeto || a.precoTeto === 0))
                .map(a => ({ ...a, falta: pesoIdeal - a.valorAtual }))
                .sort((a, b) => b.falta - a.falta);

            underweightAssets.forEach(asset => {
                if (aporteRestante <= 0.01) return;
                const valorParaComprar = Math.min(asset.falta, aporteRestante);
                const qtd = Math.floor(valorParaComprar / asset.precoAtual);
                if (qtd > 0) {
                    const custoReal = qtd * asset.precoAtual;
                    aporteRestante -= custoReal;
                    asset.rowElement.querySelector('[data-result="qtd-comprar"]').textContent = formatNumberForInput(qtd, 0);
                    asset.rowElement.querySelector('[data-result="total-comprar"]').textContent = formatCurrencyForDisplay(custoReal);
                }
            });
        }
        
        const totalCompras = assets.reduce((sum, a) => sum + parseNumber(a.rowElement.querySelector('[data-result="total-comprar"]').textContent), 0);
        summaryDiv.innerHTML = `
            <span><strong>Valor Atual:</strong> ${formatCurrencyForDisplay(totalAtual)}</span>
            <span><strong>Total com Aporte:</strong> ${formatCurrencyForDisplay(novoTotal)}</span>
            <span><strong>Peso Ideal p/ Ativo:</strong> ${formatCurrencyForDisplay(pesoIdeal)}</span>
            <span><strong>Total de Compras:</strong> ${formatCurrencyForDisplay(totalCompras)}</span>
        `;
        summaryDiv.style.display = 'flex';
    };

    const handleSave = () => {
        const data = getAssetDataFromUI().map(({ rowElement, valorAtual, ...rest }) => rest);
        if (data.length === 0) return alert("Não há nada para salvar.");
        const jsonString = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `carteira-rebalanceador-${new Date().toISOString().slice(0,10)}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    };

    const handleFileImport = (event) => {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        const fileExtension = file.name.split('.').pop().toLowerCase();

        if (fileExtension === 'json') {
            reader.onload = (e) => {
                try {
                    const data = JSON.parse(e.target.result);
                    populateTable(data);
                } catch (err) { alert("Erro ao ler o arquivo JSON."); }
            };
            reader.readAsText(file);
        } else if (fileExtension === 'xlsx') {
            reader.onload = (e) => {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    let allSheetsData = [];
                    workbook.SheetNames.forEach(sheetName => {
                        const worksheet = workbook.Sheets[sheetName];
                        const jsonData = XLSX.utils.sheet_to_json(worksheet, {raw: false});
                        const mappedData = mapXLSXData(jsonData);
                        allSheetsData = allSheetsData.concat(mappedData);
                    });
                    
                    populateTable(allSheetsData);
                } catch (err) {
                      console.error(err);
                      alert("Erro ao ler o arquivo XLSX.");
                }
            };
            reader.readAsArrayBuffer(file);
        } else {
            alert("Formato de arquivo não suportado. Use .json ou .xlsx.");
        }
        event.target.value = '';
    };

    const mapXLSXData = (jsonData) => {
        return jsonData.map(row => {
            const newRow = {};

            let ativoRaw = row['Ativo'] || row['Produto'] || row['Ticker'];
            if (ativoRaw) { newRow.ativo = String(ativoRaw).split(' - ')[0].trim(); }

            let qtdRaw = row['Qtd. Atual'] || row['Qtd.'] || row['Quantidade'];
            if (qtdRaw !== undefined) {
                const isTesouro = (newRow.ativo || '').toUpperCase().includes('TESOURO');
                const qtdNum = parseNumber(qtdRaw);
                newRow.qtdAtual = isTesouro ? qtdNum : Math.floor(qtdNum);
            }
            
            // --- MODIFICAÇÃO PARA O TESOURO DIRETO ---
            const valorAtualizadoTD = parseNumber(row['Valor Atualizado']);
            const quantidadeTD = parseNumber(row['Quantidade']);

            if (valorAtualizadoTD > 0 && quantidadeTD > 0 && (newRow.ativo || '').toUpperCase().includes('TESOURO')) {
                newRow.precoAtual = valorAtualizadoTD / quantidadeTD;
            } else {
                let precoRaw = row['Preço Atual'] || row['Preço de Fechamento'] || row['Cotação'] || row['Preço'] || row['PU'] || row['Valor na Data'] || row['Preço Unitário'];
                if (precoRaw !== undefined) { newRow.precoAtual = parseNumber(precoRaw); }
            }
            
            newRow.precoMedio = parseNumber(row['Preço Médio']);
            newRow.precoTeto = parseNumber(row['Preço Teto']);
            newRow.precoResistencia = row['Preço Resistência'] || '';

            return newRow;
        }).filter(row => row.ativo && row.qtdAtual > 0);
    };
    </script>
</body>
</html>